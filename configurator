#!/usr/bin/env python3

from argparse import ArgumentParser, RawDescriptionHelpFormatter
import logging
import os
from pathlib import Path
import stat
import subprocess
import sys

# TODO Review the architecture
# Currently, the packaging and the execution folder architectures
# are mixed together.
# Try to decouple them.

class Helpers:
    @staticmethod
    def get_logger(name: str = 'default'):
        logger = logging.getLogger(name)
        logger.setLevel(logging.INFO)

        # Avoid messages duplication after multiple Jupyter Lab runs
        handler_console = None
        handlers = logger.handlers
        for h in handlers:
            if isinstance(h, logging.StreamHandler):
                handler_console = h
                break
        if not handler_console:
            logger.addHandler(logging.StreamHandler())

        return logger

    @staticmethod
    def list_dirs(from_dir: Path):
        return [entry for entry in os.scandir(from_dir) if entry.is_dir()]

    @staticmethod
    def list_dirnames(from_dir: Path):
        return [entry.name for entry in os.scandir(from_dir) if entry.is_dir()]

    @staticmethod
    def check_dir(directory: Path, contains:dict = {}, logger=get_logger()) -> bool:
        all_subpaths_present = True
        for relative_subpath, check_method in contains.items():
            sub_path = directory / relative_subpath
            all_subpaths_present = sub_path.exists() and check_method(sub_path)
            # For debug purposes
            if not sub_path.exists():
                logger.debug(f'{sub_path} does not exist')
        return all_subpaths_present

    @staticmethod
    def check_is_file(pathname: Path, logger=get_logger()) -> bool:
        ret = pathname.is_file()
        if not ret:
            logger.error(f'{pathname} is not a file')
        return ret

    # TODO Factorize this by adding the permissions to check
    # as an argument, and bind these arguments when using
    # these methods as 'function pointers'.
    @staticmethod
    def check_is_readable_file(pathname: Path, logger=get_logger()) -> bool:
        if not Helpers.check_is_file(pathname):
            return False

        if not ((os.stat(pathname).st_mode & stat.S_IRUSR)):
            logger.error(f'{pathname} is not readable by its owner')
            return False

    @staticmethod
    def check_is_exe_file(pathname: Path, logger=get_logger()) -> bool:
        if not Helpers.check_is_file(pathname):
            return False

        if not ((os.stat(pathname).st_mode & stat.S_IXUSR) != 0):
            logger.error(f'{pathname} is not executable by its owner')
            return False

        return True

class Configurator:
    # FIXME Parse these information from configuration files
    REQUIRED_FILES_PATHS=['module', 'DESC']

    # TODO Put such functions and setup into libraries

    def __init__(self, modules_dirpath):
        main_logger = logging.getLogger('armbian-configurator')
        main_logger.setLevel(logging.DEBUG)
        main_logger.addHandler(logging.StreamHandler())
        self.logger  = main_logger
        self.modules_dirpath = Path(modules_dirpath)
        self.list_modules()

    def best_desc_filename(self, module_name: str) -> Path:
        module_root_path = self.module_path(module_name)

        # LANG is generally something like
        #  C
        #  en_US.utf8
        #  fr_FR.iso8859-15
        # We only use the part before the '.', so
        # we split at '.' and take the first element
        locale = os.environ['LANG'].split('.')[0]

        # To continue, in the case of fr_FR, to retrieve
        # only "fr", we split at '_' and take the first
        # element
        simple_locale = locale.split('_')[0]

        desc_filenames = [f'DESC.{locale}', f'DESC.{simple_locale}', f'DESC']

        for desc_filename in desc_filenames:
            desc_filepath = module_root_path / desc_filename
            if desc_filepath.exists():
                return desc_filepath

        # There IS ZERO reason for this message to appear.
        # Hence the 'CRITICAL' level of the error.
        # We're supposed to list the descriptions of available modules.
        # The availability of a module is checked beforehand
        # and requires a 'DESC' to be in the module folder.
        self.logger.critical('No Description found')

        return ''

    def list_modules(self):
        # TODO Bind the logger in the check methods
        required_files = { 'DESC': Helpers.check_is_readable_file, 'cli/module': Helpers.check_is_exe_file }
        modules_dirpath = self.modules_dirpath

        modules = {}
        for name in Helpers.list_dirnames(modules_dirpath):
            sub_path = modules_dirpath / name
            is_module = Helpers.check_dir(directory = sub_path, contains = required_files)
            if not is_module:
                continue

            modes = ['cli']
            for additional_mode in ['tui', 'gui']:
                mode_files = { f'{additional_mode}/module': Helpers.check_is_exe_file }
                has_required_files = Helpers.check_dir(directory = sub_path, contains = mode_files)
                if not has_required_files:
                    continue
                modes.append(additional_mode)


            modules[name] = {'modes': modes, 'desc': sub_path / self.best_desc_filename(name)}
        self.modules = modules

    def module_path(self, module_name: str) -> Path:
        return self.modules_dirpath / module_name

    def module_exist(self, module_name: str) -> bool:
        return module_name in self.modules

    def module_modes(self, module_name: str) -> list:
        return self.modules[module_name]['modes'] if self.module_exist(module_name) else []

    def module_desc(self, module_name: str) -> str:
        with open(self.modules[module_name]['desc']) as desc_file:
            return desc_file.readline()

    def print_modules(self):
        for module_name in self.modules:
            modes = ', '.join(self.module_modes(module_name))
            desc  = self.module_desc(module_name).strip()
            self.logger.info(f'\t{module_name}\t{modes}\t{desc}')

    def system_can_handle_gui(self):
        return "DISPLAY" in os.environ

    def execute_module(self, module_name: str, arguments: list, mode: str = '') -> int:
        if not self.module_exist(module_name):
            self.logger.critical(f'Module {module_name} does not exist !')
            return -1

        modes = self.module_modes(module_name)

        if not mode:
            mode = 'cli'
            if not arguments:
                if 'gui' in modes and self.system_can_handle_gui():
                    mode = 'gui'
                elif 'tui' in modes:
                    mode = 'tui'
                else:
                    mode = 'cli'
        else:
            if not mode in modes:
                self.logger.critical(f'The module {module_name} has no {mode} mode')
                return -1

        subprocess.run([self.module_path(module_name) / mode / 'module'] + arguments)


def parse_arguments(arguments: list):

    # TODO Make it configurable through config files
    # AND command line arguments
    default_modules_path = '/usr/share/armbian/configurator/modules'
    modules_dirpath = default_modules_path
    if 'ARMBIAN_MODULES_DIRPATH' in os.environ:
        modules_dirpath = os.environ['ARMBIAN_MODULES_DIRPATH']

    configurator = Configurator(modules_dirpath=modules_dirpath)

    epilog  = 'The modules are all installed in /usr/share/armbian/configurator/modules\n\n'
    epilog += 'Example usage :\n'
    epilog += '    configurator docker\n'


    parser = ArgumentParser(
        description='Armbian configurator')
        #formatter_class=RawDescriptionHelpFormatter,
        #epilog=epilog)
    parser.add_argument('module')
    parser.add_argument('--mode', nargs=1, choices=['cli', 'tui', 'gui'], help='Launch a module in a specific mode')


    # Basically, ArgParse should only manage the arguments that
    # are passed to the configurator.
    # The other arguments must be passed "as-is" to the module.
    # So :
    # * We search for the first argument that doesn't start with
    # a dash
    # * We consider that to be the module name
    # * We cut the array after the module name.
    #   This new array is considered to be the arguments to
    #   the module.
    configurator_args = arguments[1:]
    module_args = []
    for i in range(1,len(arguments)):
        if not (arguments[i].startswith("-")):
            next_arg = i + 1
            configurator_args = arguments[1:next_arg]
            module_args = arguments[next_arg:]
            break

    result = []
    try:
        result = parser.parse_args(configurator_args)
    except:
        print('\nAvailable modules are :\n')
        configurator.print_modules()
        print(epilog)
        sys.exit(1)

    mode = ''
    if result.mode:
        mode = mode.join(result.mode)

    sys.exit(configurator.execute_module(result.module, arguments=module_args, mode=mode))

if __name__ == '__main__':


    parse_arguments(sys.argv)
    sys.exit(0)
    #arguments = sys.argv
    #n_args = len(arguments)
    #if n_args < 2:
        #configurator.print_modules()
    #else:
        #module_name = arguments[1]
        #configurator.execute_module(module_name, arguments=arguments[2:])
